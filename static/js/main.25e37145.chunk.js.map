{"version":3,"sources":["components/RadioControl/RadioControl.jsx","ResultCard/ResultCard.jsx","App.js","components/vigenere/vigenere.js","serviceWorker.js","theme.js","index.js"],"names":["RadioControl","props","FormControl","RadioGroup","value","onChange","Grid","container","direction","item","FormControlLabel","control","Radio","color","label","ResultCard","Paper","className","classes","output","elevation","alignItems","style","fontSize","fontWeight","marginBottom","resultText","useStyles","makeStyles","html","backgroundColor","fontFamily","input","width","height","border","padding","App","useState","inputText","setInputText","setResultText","key","setKey","valueRadio","setValueRadio","useEffect","plainText","encrypt","toLowerCase","cifrar","cipherText","decrypt","descifrar","Container","maxWidth","spacing","paddingTop","TextField","multiline","fullWidth","e","target","variant","rows","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","overrides","MuiOutlinedInput","root","borderColor","borderWidth","borderRadius","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.25e37145.chunk.js","sourcesContent":["import FormControl from \"@material-ui/core/FormControl\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport React from \"react\";\r\n\r\nexport function RadioControl(props) {\r\n  return <FormControl>\r\n    <RadioGroup value={props.value} onChange={props.onChange}>\r\n      <Grid container direction='row'>\r\n        <Grid item>\r\n          <FormControlLabel value='encrypt' control={<Radio color='primary' />} label='encrypt' />\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControlLabel value='decrypt' control={<Radio color='primary' />} label='decrypt' />\r\n        </Grid>\r\n      </Grid>\r\n    </RadioGroup>\r\n  </FormControl>;\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\n\r\nexport function ResultCard(props) {\r\n  return <Paper className={props.classes.output} elevation={0}>\r\n    <Grid container direction='column' alignItems='center'>\r\n      <Grid item>\r\n        <div style={{ fontSize: \"1.5rem\", fontWeight: 700, marginBottom: \"0.7em\" }}>\r\n          Your encrypted message\r\n        </div>\r\n      </Grid>\r\n      <Grid item>\r\n        {props.resultText}\r\n      </Grid>\r\n    </Grid>\r\n  </Paper>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { cifrar, descifrar } from './components/vigenere/vigenere';\nimport { RadioControl } from \"./components/RadioControl/RadioControl\";\nimport { ResultCard } from \"./ResultCard/ResultCard\";\n\n\nconst useStyles = makeStyles(() => ({\n  '@global': {\n    html: {\n      backgroundColor: '#f2f9f9',\n      fontFamily: 'arial'\n    }\n  },\n  input: {\n    width: '30em',\n    backgroundColor: 'white'\n  },\n  output: {\n    width: '35em',\n    height: '15em',\n    backgroundColor: 'white',\n    border: '1px solid rgb(196, 196, 196)',\n    padding: '2em'\n  }\n}))\n\nfunction App() {\n  const [inputText, setInputText] = useState('Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.');\n  const [resultText, setResultText] = useState('');\n  const [key, setKey] = useState('fortuna');\n  const [valueRadio, setValueRadio] = useState('encrypt');\n  const classes = useStyles()\n\n  useEffect(() => {\n    if(valueRadio === 'encrypt') {\n      setResultText(cifrar(inputText, key));\n    } else {\n      setResultText(descifrar(inputText, key));\n    }\n  }, [inputText, key, valueRadio]);\n\n  return (\n    <Container maxWidth='sm'>\n      <Grid container direction='column' spacing={3} alignItems='center'>\n        <Grid item>\n          <div style={{ fontSize: '2rem', paddingTop: '2em', fontWeight: 700 }}>\n            Vigenere encription\n          </div>\n        </Grid>\n        <Grid item>\n          <TextField\n            value={inputText}\n            multiline\n            fullWidth\n            onChange={(e) => setInputText(e.target.value)}\n            variant='outlined'\n            className={classes.input}\n            rows={8}\n          />\n        </Grid>\n        <Grid item>\n          <RadioControl value={valueRadio} onChange={(e) => setValueRadio(e.target.value)} />\n        </Grid>\n        <Grid item>\n          <TextField value={key}\n                     onChange={(e) => setKey(e.target.value)}\n                     variant='outlined'\n                     label='Secret key'\n                     style={{ backgroundColor: 'white' }}\n          />\n        </Grid>\n        <Grid item>\n          <ResultCard classes={classes} resultText={resultText} />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { encrypt, decrypt } from \"vigenere-cipher\";\r\n\r\nexport const cifrar = (plainText, key) => {\r\n    return encrypt(plainText.toLowerCase(), key.toLowerCase());\r\n}\r\n\r\nexport const descifrar = (cipherText, key) => {\r\n    return decrypt(cipherText.toLowerCase(), key.toLowerCase())\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\n\r\nexport default createMuiTheme({\r\n  overrides: {\r\n\r\n    MuiOutlinedInput: {\r\n      root: {\r\n        '&$focused $notchedOutline': {\r\n          borderColor: 'black',\r\n          borderWidth: 1,\r\n        },\r\n        '&:hover': {\r\n          border: '1px solid black',\r\n          borderRadius: '5px'\r\n        }\r\n      }\r\n    },\r\n  }\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/styles'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}